window.$app.defineComponent("courses","vue-courses-course-form",{data:function(){return{isFetching:!1,isUpdating:!1,values:{}}},mixins:[FormModel],props:["course"],created:function(){this.values=_.clone(this.course)},methods:{updateData:function(){var e=this;this.isUpdating=!0,this.$api.post("courses/set",this.values,this).then(function(s){"success"==s.result&&(Object.assign(e.course,e.values),e.$parent.close()),e.isUpdating=!1}).catch(function(){e.isUpdating=!1})}},template:'<div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title"><span v-if="values.course_id">{{\'Редактирование курса\'|gettext}}</span><span v-else>{{\'Новый курс\'|gettext}}</span></p> <button class="modal-close is-large" @click="$parent.close()"></button> </header> <section class="modal-card-body"> <b-field :label="\'Название курса\'|gettext" :message="errors.title" :class="{\'has-error\': errors.title}"> <b-input v-model="values.title" maxlength="255" :has-counter="false" class="has-rtl" v-focus></b-input> </b-field> </section> <footer class="modal-card-foot"> <button class="button is-dark level-item" type="button" @click="$parent.close()">{{\'Закрыть\'|gettext}}</button> <button class="button is-primary" :class="{\'is-loading\': isUpdating}" @click="updateData">{{\'Сохранить\'|gettext}}</button> </footer> <b-loading :is-full-page="false" :active.sync="isFetching"></b-loading> </div>'}),window.$app.defineComponent("courses","vue-courses-course",{data:function(){return{isFetching:!1,course:{title:"",modules:[]}}},props:["course_id"],watch:{course:{handler:function(){this.$form.top.title=this.course.title?this.course.title:this.$gettext("Курс")},deep:!0}},created:function(){this.$form.top.title=this.$gettext("Курс"),this.$io.on("events:courses.lessons.list:refresh",this.refreshLessons),this.fetchData(!0)},beforeDestroy:function(){this.$io.off("events:courses.lessons.list:refresh",this.refreshLessons)},methods:{fetchData:function(s){var e=this;this.isFetching=s,this.$api.get("courses/get",{course_id:this.course_id}).then(function(s){"success"==s.result&&(e.course=s.response.course,e.isFetching=!1)})},refreshLessons:function(s){var e=this;s.course_id==this.course_id&&this.$api.get("courses/content",{course_id:this.course_id}).then(function(s){"success"==s.result&&(e.course.modules=s.response.course.modules)})},editForm:function(){this.$modal("vue-courses-course-form",{course:this.course})},addModuleForm:function(){this.$modal("vue-courses-module-form",{course_id:this.course_id})},addLessonForm:function(s){this.$form.open("vue-courses-lesson-form",{module_id:s})},editLessonForm:function(s){this.$form.open("vue-courses-lesson-form",{lesson_id:s})},editModuleForm:function(s){this.$modal("vue-courses-module-form",{module_id:s})}},template:'<div class="container has-mt-3 has-mb-3"> <div class="level has-mb-3"> <div class="level-left"> <h2>{{\'Курс\'|gettext}}</h2> </div> <div class="level-right"> <button type="button" class="button is-dark is-rounded" @click="editForm">Редактировать</button> </div> </div> <div class="panel panel-default has-p-2 has-mb-6"> {{course}} </div> <h2 class="has-mb-3">Контент</h2> <div class="panel panel-default"> <div v-if="_.size(course.modules)"> <div v-for="m in course.modules" class="courses-module"> <div> <div><b>{{m.title}}</b></div> <div><button class="button is-light" @click="editModuleForm(m.module_id)">Редактировать</button></div> </div> <div class="is-lessons"> <div v-for="l in m.lessons" class="courses-lesson"> <div> <div>{{l.title}}</div> <div><button class="button is-light" @click="editLessonForm(l.lesson_id)">Редактировать</button></div> </div> </div> <div class="courses-lesson is-link" @click="addLessonForm(m.module_id)"> <div><div><i class="fa fa-plus has-mr-2"></i>{{\'Добавить урок\'|gettext}}</div></div> </div> </div> </div> <div class="courses-module is-link" @click="addModuleForm"> <div><div><i class="fa fa-plus has-mr-2"></i>{{\'Добавить модуль\'|gettext}}</div></div> </div> </div> <div v-else class="has-p-2"> <center><b>Добавьте содержание</b></center> </div> </div> <b-loading :is-full-page="false" :active.sync="isFetching"></b-loading> </div>'}),window.$app.defineComponent("courses","vue-courses-index",{data:function(){return{isFetching:!1,isReadonly:!0}},mixins:[ListModel],created:function(){this.isReadonly=!this.$auth.isAllowEndpoint("courses/set"),this.$io.on("events:courses.list:refresh",this.refresh),this.fetchData(!0)},beforeDestroy:function(){this.$io.off("events:courses.list:refresh",this.refresh)},methods:{clickRow:function(s){this.$form.open("vue-courses-course",{course_id:s.course_id})},fetchData:function(s,e){function t(s){i.fields=s.fields}var i=this;!e&&this.checkCache(t)||(this.isFetching=s,this.$api.post("courses/list",{next:this.next,count:this.perPage,sort_field:this.sortField,sort_order:this.sortOrder}).then(function(s){i.cachePage(s.response,t),i.isFetching=!1}).catch(function(s){throw i.total=0,i.isFetching=!1,s}))}},template:'<div class="container has-mt-3 has-mb-3"> <b-table backend-pagination backend-sorting pagination-simple :data="fields" :loading="isFetching" :current-page="page" :per-page="perPage" :total="total" :default-sort="[sortField, sortOrder]" @page-change="onPageChange" @click="clickRow" @sort="onSort" hoverable bordered> <b-table-column :label="\'Название\'|gettext" v-slot="props"> <span> {{ props.row.title }} </span> <span> {{ props.row.tms_created|datetime }} </span> </div> </b-table-column> <template slot="empty"> <section class="has-mb-4 has-mt-4 content has-text-grey has-text-centered" v-if="!isFetching"> <div class="row"> <div class="col-xs-12 col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3"> <h3 class="has-p-2 has-text-grey-light has-text-centered has-mb-2"><i class="fal fa-users-class has-text-grey-light" style="font-size: 5rem"></i></h3> <div class="has-mb-2">{{\'Курсы\'|gettext}}</div> <a @click="clickRow({course_id: null})" class="button is-primary" :class="{disabled: isReadonly}"><i class=\'fas fa-plus\'></i><span class=\'has-ml-1\'>{{\'Новый курс\'|gettext}} </span></a> </div> </div> </section> <section class="has-mb-4 has-mt-4 content has-text-grey has-text-centered" v-if="isFetching"> <p>{{\'Загрузка данных\'|gettext}}</p> </section> </template> </b-table> </div>'}),window.$app.defineComponent("courses","vue-courses-lesson-form",{data:function(){return{isFetching:!1,isUpdating:!1,values:{title:"",body:null}}},mixins:[FormModel],props:["lesson_id","module_id"],watch:{values:{handler:function(){this.$form.top.title=this.values.title?this.values.title:this.$gettext("Урок")},deep:!0}},created:function(){this.$form.top.title=this.$gettext("Урок"),this.$form.top.buttons={save:{title:this.$gettext("Сохранить"),classname:"is-primary",click:this.updateData}},this.lesson_id?this.fetchData():(this.values.module_id=this.module_id,this.values.body={})},methods:{fetchData:function(){var e=this;this.isFetching=!0,this.$api.get("courses/lessons/get",{lesson_id:this.lesson_id}).then(function(s){"success"==s.result&&(e.values=s.response.values),e.isFetching=!1})},updateData:function(){var e=this;this.isUpdating=!0,this.$api.post("courses/lessons/set",this.values,this).then(function(s){"success"==s.result&&e.$form.close(),e.isUpdating=!1}).catch(function(){e.isUpdating=!1})}},template:'<div class="container has-mt-3 has-mb-3"> <b-field :label="\'Название урока\'|gettext" :message="errors.title" :class="{\'has-error\': errors.title}"> <b-input v-model="values.title" maxlength="255" :has-counter="false" class="has-rtl" v-focus></b-input> </b-field> <vue-component-htmleditor v-model="values.body" v-if="values.body"></vue-component-htmleditor> </div>'}),window.$app.defineComponent("courses","vue-courses-module-form",{data:function(){return{isFetching:!1,isUpdating:!1,values:{}}},mixins:[FormModel],props:["module_id","course_id"],created:function(){this.module_id?this.fetchData():this.values.course_id=this.course_id},methods:{fetchData:function(){var e=this;this.isFetching=!0,this.$api.get("courses/modules/get",{module_id:this.module_id}).then(function(s){"success"==s.result&&(e.values=s.response.values),e.isFetching=!1})},updateData:function(){var e=this;this.isUpdating=!0,this.$api.post("courses/modules/set",this.values,this).then(function(s){"success"==s.result&&e.$parent.close(),e.isUpdating=!1}).catch(function(){e.isUpdating=!1})}},template:'<div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title"><span v-if="values.course_id">{{\'Редактирование модуля\'|gettext}}</span><span v-else>{{\'Новый модуль\'|gettext}}</span></p> <button class="modal-close is-large" @click="$parent.close()"></button> </header> <section class="modal-card-body"> <b-field :label="\'Название модуля\'|gettext" :message="errors.title" :class="{\'has-error\': errors.title}"> <b-input v-model="values.title" maxlength="255" :has-counter="false" class="has-rtl" v-focus></b-input> </b-field> </section> <footer class="modal-card-foot"> <button class="button is-dark level-item" type="button" @click="$parent.close()">{{\'Закрыть\'|gettext}}</button> <button class="button is-primary" :class="{\'is-loading\': isUpdating}" @click="updateData">{{\'Сохранить\'|gettext}}</button> </footer> <b-loading :is-full-page="false" :active.sync="isFetching"></b-loading> </div>'}),window.$app.defineModule("courses",[]);
